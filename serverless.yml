service: parks-reso-api

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  stage: api
  region: ca-central-1
  lambdaHashingVersion: 20201221

package:
  individually: true
  patterns:
    - '!./**' # This causes Serverless to only package referenced source files

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-include-dependencies
functions:
  ###########
  # captcha
  ###########
  generateCaptcha:
    handler: lambda/captcha/handler.generateCaptcha
    events:
      - http:
          method: POST
          path: /captcha
          cors: true
  verifyCaptcha:
    handler: lambda/captcha/handler.verifyAnswer
    events:
      - http:
          method: POST
          path: /captcha/verify
          cors: true

  generateCaptchaAudio:
    handler: lambda/captcha/handler.generateAudio
    events:
      - http:
          method: POST
          path: /captcha/audio
          cors: true

  cloudwatchAlarm:
    handler: lambda/cloudwatchAlarm/index.handler

  ###########
  # config
  ###########
  readConfig:
    handler: lambda/readConfig/index.handler
    events:
      - http:
          method: GET
          path: /config
          cors: true
  writeConfig:
    handler: lambda/writeConfig/index.handler
    events:
      - http:
          method: POST
          path: /config
          cors: true

  ###########
  # park
  ###########
  readPark:
    handler: lambda/readPark/index.handler
    events:
      - http:
          method: GET
          path: /park
          cors: true
  writePark:
    handler: lambda/writePark/index.handler
    events:
      - http:
          method: POST
          path: /park
          cors: true
      - http:
          method: PUT
          path: /park
          cors: true

  ###########
  # Facility
  ###########
  readFacility:
    handler: lambda/readFacility/index.handler
    events:
      - http:
          method: GET
          path: /facility
          cors: true
  writeFacility:
    handler: lambda/writeFacility/index.handler
    events:
      - http:
          method: POST
          path: /facility
          cors: true
      - http:
          method: PUT
          path: /facility
          cors: true

  ###########
  # Pass
  ###########
  readPass:
    handler: lambda/readPass/index.handler
    events:
      - http:
          method: GET
          path: /pass
          cors: true
  writePass:
    handler: lambda/writePass/index.handler
    events:
      - http:
          method: POST
          path: /pass
          cors: true
  deletePass:
    handler: lambda/deletePass/index.handler
    events:
      - http:
          method: DELETE
          path: /pass
          cors: true

  ###########
  # Export
  ###########
  exportPass:
    handler: lambda/exportPass/index.handler
    events:
      - http:
          method: GET
          path: /export-pass
          cors: true

  ###########
  # Metric
  ###########
  metric:
    handler: lambda/metric/index.handler
    events:
      - http:
          method: GET
          path: /metric
          cors: true

  ###########
  # Jobs
  ###########
  # aws lambda invoke /dev/null --endpoint-url http://localhost:3002 --function-name parks-reso-api-api-checkActivation
  checkActivation:
    handler: lambda/checkActivation/index.handler
  # aws lambda invoke /dev/null --endpoint-url http://localhost:3002 --function-name parks-reso-api-api-checkExpiry
  checkExpiry:
    handler: lambda/checkExpiry/index.handler
  warmUp:
    handler: lambda/warmUp/index.handler
    package:
      patterns:
        - lambda/warmUp/worker.js

custom:
  dynamodb:
    stages:
      - api
    start:
      host: localhost
      port: 8000
      noStart: true
      seed: true
      migrate: true

resources:
  Resources:
    bcprsCampingTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: parksreso
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: shortPassDate
            AttributeType: S
          - AttributeName: facilityName
            AttributeType: S
          - AttributeName: passStatus
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: passStatus-index
            KeySchema:
              - AttributeName: passStatus
                KeyType: HASH
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - type
                - facilityName
                - date
                - pk
                - sk
            BillingMode: PAY_PER_REQUEST
          - IndexName: shortPassDate-index
            KeySchema:
              - AttributeName: shortPassDate
                KeyType: HASH
              - AttributeName: facilityName
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - firstName
                - searchFirstName
                - lastName
                - searchLastName
                - facilityName
                - email
                - date
                - shortPassDate
                - type
                - registrationNumber
                - numberOfGuests
                - passStatus
                - phoneNumber
                - facilityType
                - license
            BillingMode: PAY_PER_REQUEST
